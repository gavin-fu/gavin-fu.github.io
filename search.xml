<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux磁盘操作]]></title>
    <url>%2Flinux%2Flinux%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Linux下磁盘分区、格式化、挂载 本文中的命令需要以 root用户操作 磁盘分区使用 fdisk命令进行磁盘分区 (无法处理大于2TB以上的磁盘分区，若磁盘大于2TB可使用 parted命令)12345678910fdisk -l # 找出需要分区的磁盘名称fdisk /dev/sdb # /dev/sdb 后面不要接数字# fdisk常用操作# m print this menu # 查看 fdisk帮助手册# d delete a partition # 删除分区# n add a new partition # 新增分区# p print the partition table # 打印分区信息# q quit without saving changes # 退出 fdisk，不保存当前操作# w write table to disk and exit # 保存退出 若使用 fdisk分区保存之后若发现找不到分区，可使执行如下命令1partproba # 强制让内核重新加载分区表 分区注意事项： 一个磁盘仅能存在4个主分区，当磁盘分配了4个主分区后将不能继续对磁盘进行分区； 一个磁盘仅能存在1个扩展分区，扩展分区下可以分配多个逻辑分区； 磁盘下需要分配多个分区的方式：3个主分区 + 1个扩展分区， 扩展分区下继续分配逻辑分区； 格式化分区使用 mkfs综合命令进行磁盘分区12345mkfs [tab] [tab] # 当前系统可格式化的文件系统类型mkfs.&lt;FileSystem&gt; -help # 查看帮助，&lt;FileSystem&gt;替换成具体的文件系统名，如： ext4# 示例：mkfs.ext4 -c /dev/sdb1 # -c 格式化指定分区 sdb1 挂载使用 mount挂载设备文件123456789101112mount -amount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 设备文件名 挂载点# 参数： -a 根据 /etc/fstab的内容，将所有未挂载的磁盘都挂载上来 -t 指定挂载的文件系统类型，如挂载磁盘： -t iso9660 -n 不将挂载信息写入 /etc/mtab中 -L 使用文件系统的卷标名进行挂载 -o 挂载额外参数（default: rw, suid, dev, exec, auto, nouser, and async）# 示例：mount /dev/sdb1 /opt/ 使用 umount卸载设备文件12345678umount [-fn] 设备文件名称/挂载点# 参数： -f 强制卸载 -n 不更新 /etc/tmap# 示例：umount /dev/sdb1 设置开机挂载设置开机挂载只需要将挂载信息写入 /etc/fstab文件中即可，该文件挂载项有6个字段，分别如下： 第一列： 设备文件名/设备Label 第二列： 挂载点 第三列： 磁盘分区的文件系统 第四列： 文件系统参数 （mount -o 指定的额外参数）， 参数详情 第五列： 能否被 dump备份命令作用（0： 不做 dump备份 / 1： 每天进行 dump操作） 第六列： 是否以 fsck检查扇区（0：不检查 / 1：较早检查 / 2：需要检查） 文件系统参数 参数 说明 ro/rw 挂载文件系统成为只读(ro) 或可擦写(rw) async/sync 此文件系统是否使用同步写入 (sync) 或异步 (async) 的内存机制。默认为 async。 auto/noauto 允许此 partition 被以 mount -a 自动挂载(auto) dev/nodev 是否允许此 partition 上，可创建装置文件？ dev 为可允许 suid/nosuid 是否允许此 partition 含有 suid/sgid 的文件格式？ exec/noexec 是否允许此 partition 上拥有可运行 binary 文件？ user/nouser 是否允许此 partition 让任何使用者运行 mount ？一般来说，mount 仅有 root 可以进行，但下达 user 参数，则可让一般 user 也能够对此 partition 进行 mount 。 defaults 默认值为：rw, suid, dev, exec, auto, nouser, and async remount 重新挂载，这在系统出错，或重新升级参数时，很有用 挂载分区注意事项 单个文件系统不应挂载到多个挂载点（目录）中； 单个挂载点不应重复挂载多个文件系统； 应当使用空目录作为挂载点；若挂载点不为空目录，那么挂载了文件系统后，原目录下的文件将会暂时消失，直至卸载该文件系统 参考 鸟哥的Linux私房菜 - 基础学习篇 （第8章）]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Virtualbox共享文件夹]]></title>
    <url>%2Fvirtualbox%2Fvirtualbox%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[配置 VirtualBox共享文件夹 环境 VirtualBox 5.2.2 CentOS7 添加虚拟光驱在 VirtualBox管理器中选择需要设置共享文件夹的虚拟机（虚拟机必须关闭），并进行如下操作：1设置 -&gt; 存储 -&gt; 控制器IDE -&gt; 添加 虚拟 光驱 -&gt; 留空 安装增强功能 启动虚拟机，然后在 VirtualBox菜单栏选中 “设备 -&gt; 安装增强功能”此操作将挂载 VirtualBox工具包至虚拟机中（CentOS7 默认挂载至: /run/media/user/VBox_GAs_5.2.2） 安装增强工具包 123cd /run/media/gavin/VBox_GAs_5.2.2sudo ./VBoxLinuxAdditions.run # 安装增强工具包sudo reboot # 重启虚拟机 设置共享文件夹在 VirtualBox管理器中进行如下操作：1设置 -&gt; 共享文件夹 -&gt; 右键选择 &quot;固定分配&quot; -&gt; 添加共享文件夹 注：不要选择 “自动挂载”， 否则挂载共享文件夹会出现错误：/sbin/mount.vboxsf: mounting failed with the error: Protocol error 挂载共享文件夹登入虚拟机，执行如下命令：123su - # root用户操作mkdir /mnt/shared # 创建挂载目录mount -t vboxsf share /mnt/shared # 挂载共享文件夹 注：共享文件夹与虚拟机挂载目录名字不要相同]]></content>
      <categories>
        <category>VirtualBox</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2体系结构]]></title>
    <url>%2Fdatabase%2Fdb2%2Fdb2%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[DB2数据库体系结构 DB2体系结构图 DB2服务器环境变量1. 环境变量1set &lt;variable&gt;=&lt;value&gt; # 设置服务器变量 2.全局注册变量123db2set -all # 查看当前注册变量设置 ([g]全局、[i]实例)db2set -lr # 查询所有注册变量 (全局 + 实例)db2set &lt;variable&gt;=&lt;value&gt; -g # 设置全局注册变量 实例创建实例参考： DB2数据库安装 实例相关命令12345678db2ilist # 列出实例db2start # 启动实例db2stop [force] # 停止实例db2 force application all # 强制中断实例下所有连接（当无法停止实例时，可以先执行该操作）db2iauto -[on | off] &lt;instance_name&gt; # 自动起停实例db2 attach to &lt;instance_name&gt; # 连接实例db2 detach / db2 terminate # 断开实例db2idorp &lt;instance_name&gt; # 删除实例 (需要root权限) 配置实例1. 实例级注册变量123db2set &lt;variable&gt;=&lt;value&gt; [-i instance_name] # 设置实例级注册变量# egdb2set DB2COMM=TCPIP 2. 数据库管理配置文12345db2 get dbm cfg # 获取当前实例数据库管理文件配置db2 reset dbm cfg # 恢复默认配置db2 update dbm cfg using &lt;parameter_name&gt; &lt;value&gt; # 配置当前实例数据库管理文件参数# eg db2 update dbm cfg using SVCENAME=50000 DB2INSTANCE 变量 该变量主要用于实例间切换，但在Linux/Unix系统下实例名即为实例用户名，因此直接使用不同实例用户登陆进行实例切换123echo $DB2INSTANCE # 输出变量值set DB2INSTANCE=&lt;instance_name&gt; # 设置变量值get instance # 获取当前实例 数据库创建数据库创建数据库时默认生成三个表空间 SYSCATSPACE、TEMPSPACE1、USERSPACE11234567891011CREATE DATABASE &lt;db_name&gt; -- 创建数据库 AUTOMATIC STORAGE &lt;YES | NO&gt; -- 是否自动存储 ON &lt;path | drive&gt; -- 数据库路径 ALIAS &lt;db_alias&gt; -- 别名 USING CODESET &lt;code&gt; TERRITORY &lt;territory&gt; -- 代码页 COLLATE USING &lt;SYSTEM | IDENTITY | ...&gt; -- 整理次序 CATALOG TABLESPACE &lt;tablespace_option&gt; -- 系统编目表空间 USER TABLESPACE &lt;tablespace_option&gt; -- 用户表空间 TEMPORARY TABLESPACE &lt;tablespace_option&gt; -- 临时表空间 -- 大写为关键字 示例：1234567create database test automatic storage yes on /data/db2/data -- 使用自动存储管理 dbpath on /data/db2/log -- 指定数据库的事物日志存储路径 using codeset utf-8 -- 指定字符集 territory CN -- 决定数据库的时间和日期格式为中文 pagesize 16 k -- 数据库默认页大小 alias test; -- 别名 数据库相关操作12db2 list database directory # 列出当前实例下所有数据库db2 drop database &lt;database_name&gt; # 删除数据库 配置数据库1234db2 get db cfg # 获取当前据库配置文件参数设置db2 update db cfg using &lt;parameter_name&gt; &lt;value&gt; # 配置当前数据库参数文件#eg:db2 update db cfg using LOGPRIMARY 50 缓冲池 每个表空间都会与特定的缓冲池相关； 想要表空间与缓冲池相关，该缓冲池与表空间必须具有相同的页大小； 表空间与缓冲池关联是在使用 CREATE TABLESPACE 语句创建表空间时定义的，但是可以使用 ALTER TABLESPACE 语句更改关联。 创建缓冲池12345CREATE BUFFERPOOL &lt;bufferpool_name&gt; -- 缓冲池名称 SIZE &lt;AUTOMATIC | size_number&gt; -- 缓冲池大小，即页数 PAGESIZE &lt;pagesize&gt; -- 缓冲池页大小 BLOCKSIZE &lt;number&gt; -- 可选参数： 指定每个块的大小，即在一次块I/O中从磁盘读取的页的数量。应该等于正在使用缓冲池的表空间的 EXTENTSIZE 的整数倍。 NUMBLOCKPAGES &lt;number&gt; -- 可选参数： 定义块内存大小。应该是 BLOCKSIZE 的倍数，并且不能大于缓冲池页面数量的 98%。 示例：1CREATE BUFFERPOLL MYBUFFER16K SIZE AUTOMATIC PAGESIZE 16K; 缓冲池相关操作1. 修改缓冲池1ALTER BUFFERPOOL &lt;name&gt; SIZE &lt;tgt_size&gt; 2. 查看缓冲池12345SELECT T2.TBSPACE ,T1.*FROM SYSCAT.BUFFERPOOLS T1INNER JOIN SYSCAT.TABLESPACES T2ON T1.BUFFERPOOLID = T2.BUFFERPOOLID 表空间创建表空间1. 创建用户表空间123456789-- SMSCREATE TABLESPACE &lt;name&gt; MANAGED BY SYSTEM USING (&apos;&lt;path&gt;&apos;); -- DMSCREATE TABLESPACE &lt;name&gt; MANAGED BY DATABASE USING (DEVICE | FILE &apos;&lt;path&gt;&apos;); - DMS自动存储CREATE TABLESPACE &lt;name&gt;; CREATE TABLESPACE &lt; name &gt; MANAGED BY AUTOMATIC STORAGE; 2. 创建系统临时表空间1CREATE SYSTEM TEMPORARY TABLESPACE tmp_tbsp MANAGED BY SYSTEM USING (&apos;/data/tmp_tbsp&apos;); 3. 创建用户临时表空间1CREATE USER TEMPORARY TABLESPACE usr_tbsp MANAGED BY DATABASE USING (FILE &apos;/data/usr_tbsp&apos; 5000); 示例:12345678CREATE TEMPORARY TABLESPACE tbs_temp PAGESIZE 16K MANAGED BY DATABASE USING（FILE &apos;/data/&apos; 1000） EXTENTSIZE 32 OVERHEAD 10.67 PREFECHSIZE 32 TRANSFERRATE 0.04 BUFFERPOOL MYBUFFER16K； 表空间相关操作1. 查看表空间12db2 list tablespaces [show detail] # 查看表空间db2 list tablespace containers for &lt;tablespace_id&gt; # 查看表空间及容器属性 2. 修改表空间12345678910# 2.1. SMS表空间只能增加容器；ALTER TABLESPACE &lt;name&gt; ADD(DEVICE &apos;&lt;path&gt;&apos; &lt;size&gt;, FILE &apos;&lt;filename&gt;&apos; &lt;size&gt;);# 2.2. DMS表空间可以调整容器；ALTER TABLESPACE &lt;name&gt; REDUCE (FILE &apos;&lt;filename&gt;&apos; &lt;size&gt;); # 缩小ALTER TABLESPACE &lt;name&gt; EXTEND (FILE &apos;&lt;filename&gt;&apos; &lt;size&gt;); # 增大ALTER TABLESPACE &lt;name&gt; RESIZE (FILE &apos;&lt;filename&gt;&apos; &lt;size&gt;); # 调增 （可调小或调大）ALTER TABLESPACE &lt;name&gt; DROP (FILE &apos;filename&apos;, DEVICE &apos;path&apos;); # 删除DMS容器# 2.3. 自动存储表空间不能手动调整大小； 3. 重命名表空间1RENAME TABLESPACE &lt;srcName&gt; TO &lt;tgtName&gt;; 4. 将表空间从托机状态切换至联机状态1ALTER TABLESPACE &lt;name&gt; SWITCH ONLINE; 5. 删除表空间1DROP TABLESPACE &lt;name&gt;; 参考 循序渐进DB2 （第2章~第3章）]]></content>
      <categories>
        <category>Database</category>
        <category>DB2</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2数据库安装]]></title>
    <url>%2Fdatabase%2Fdb2%2Fdb2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装DB2数据库 环境CentOS 7DB2 Express-C v10.1 (db2_v101_linuxx64_expc.tar.gz) 安装DB21. 解压安装包 1tar -zxvf db2_v101_linuxx64_expc.tar.gz -C /opt 2. 执行安装db2_install 默认安装目录为 /opt/ibm/db2， 可以通过 -b指定安装目录， -h 帮助 123su - # root用户cd /opt/expc # 进入安装目录./db2_install # 以root用户安装DB2 安装实例1. 创建实例相关用户在Linux/Unix上创建实例时必须有与实例同名用户存在；实例用户的home目录，是创建实例的位置；受防护用户(db2fenc1)与应用开发相关，但是作为创建实例却是必须的。 12345# root用户执行以下命令groupadd -g 2000 db2iadm1 # 实例用户组groupadd -g 2001 db2fadm1 # 受防护组useradd -m -u 2000 -g db2iadm1 db2inst1 # 实例用户useradd -m -u 2001 -g db2fadm1 db2fenc1 # 受防护用户 2. 实例安装可以直接键入 ./db2icrt 获取命令帮助信息；Linux/Unix下 /home/实例用户/sqllib/ 目录为实例目录，实例目录一旦创建不能更改其位置。 123# root用户执行以下命令cd /opt/ibm/db2/V10.1/instance # 实例安装目录./db2icrt -p 50000 -u db2fenc1 db2inst1 # 实例安装-p &lt;端口号&gt; -u &lt;受防护用户&gt; &lt;实例用户&gt; 安装数据库使用db2实例用户创建数据库1. 创建数据库目录1234su - # root用户mkdir /data/db2/data # 创建数据库目录mkdir /data/db2/log # 创建数据库事物日志目录chown -R db2inst1:db2inst1 /data/db2/ # 赋权给 db2实例用户 2. 创建数据库123456789su - db2inst1 # db2inst1用户 db2start # 启动实例 # 创建数据库db2 "create database test automatic storage yes on /data/db2/data dbpath on /data/db2/log using codeset utf-8 territory CN pagesize 8 k" 配置 DB2运行环境可以通过引用 InstanceHome/sqllib/db2profile 文件来配置其他用户 DB2 运行环境在用户目录下 .bash_profile 文件中加入如下配置123if [ -f /home/db2inst1/sqllib/db2profile ]; then . /home/db2inst1/sqllib/db2profilefi 配置 DB2服务器的 TCP/IP通信1. 标识 “服务名称”和 “连接端口” 或 仅标识 ”连接端口” 方式一： 标识 ”连接服务名称” 和 “连接端口” 在 数据库管理器配置文件 中的 SVCENAME（服务名）指定 “服务名称”12db2 get dbm cfg | grep SVCENAME #获取当前数据库管理器配置文件中服务名db2 update dbm cfg using SVCENAME db2inst1 #设置数据库管理器配置文件中服务名为： db2inst1 在 /etc/services 配置文件中添加与修改后服务名称一致的对应端口号1db2inst1 50000/tcp 方式二： 仅标识 “连接端口” 1db2 update dbm cfg using SVCENAME 50000 2. 设置服务器的通信协议 1db2set DB2COMM=tcpip 配置 DB2 客户端通信节点目录123456-- 列出节点db2 list node directory-- 编目节点db2 catalog tcpip node &lt;node_name&gt; remote &lt;host_name | ip&gt; server &lt;port_name | port&gt; -- 删除节点 db2 uncatalog node &lt;node_name&gt; 数据库目录123456-- 列出数据库db2 list db directory -- 编码数据库db2 catalog db &lt;db_name&gt; as &lt;db_alias&gt; at node &lt;node_name&gt; -- 删除数据库db2 uncatalog db &lt;db_alias&gt;]]></content>
      <categories>
        <category>Database</category>
        <category>DB2</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL脚本开发规范]]></title>
    <url>%2Fsql%2Fsql%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[良好的编码习惯可以减少出问题的几率和后期代码维护的成本 基本要求 脚本文件名称使用小写，单词与单词间使用下划线分割，最好对应于操作的表名 脚本采用 UTF-8编码， UNIX格式 脚本必须写好基本注释信息（如： 脚本功能，加载时机频率，开发人员…） 编写规范注释编写SQL脚本中无论单行、多行注释均用 –标识，不使用块状注释 / / 12345678-- 脚本名称： demo.sql-- 脚本功能： sql脚本示例-- 加载频率： d-- 创建人： gavin-- 创建时间： 2017-12-04-- 修改人：-- 修改时间：-- 修改说明： 字段排列 每个查询字段独占一行 分割字段的逗号置于字段名称之前 查询字段写好注释 12345select field1 -- 字段1 ,field2 -- 字段2 ,field3 -- 字段3from test.demo -- 示例表; 子句排列同一级别的子句要对齐 123456789select a.field1 -- 字段1 ,a.field2 -- 字段2 ,b.field3 -- 字段3from test.tab1 a -- 表1inner join test.tab2 b -- 表2on a.field1 = b.field1where a.field2 = ''order by a.field1; 子句查询嵌套子句嵌套编排做好层次分明 12345678910select a.field1 -- 字段1 ,a.field2 -- 字段2 ,a.field3 -- 字段3from test.tab1 a -- 表1where a.field2 = ''and exists ( select 1 from test.tab2 b -- 表2 where a.field1 = b.field1 ); 字段别名 如查询字段的名称与目标表字段名称不一致，则使用 AS为字段命别名 若查询字段或表达式过长，则 AS最好分行对齐 123456789101112insert into test.tgt ( -- 目标表 field1 -- 字段1 ,field2 -- 字段2 ,field3 -- 字段3)select field1 ,'xxx' AS field2 ,express1 || express2 || express 3 AS field3from test.src -- 目标表;commit; 表别名多表嵌套查询需体现层次结构，可为表命别名。使用字母 a-z标明层次, 同一层次间使用数字标明序号 1234567891011select a1.field1 -- 字段1 a2.field2 -- 字段2from test.tab1 a1innser join ( select b1.field2 as field1 ,b2.field2 from test.tab2 b1 inner join test.tab3 b2 on b1.field1 = b2.field1 ) a2on a1.field1 = a2.field1; 特殊表命名规范 历史表： 以h结尾 临时表： 以tmp结尾 备份表： 以8位备份日期结尾]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Class对象]]></title>
    <url>%2Fjava%2Fclass%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[概述 每个类都有一个Class对象； 类Class对象是由JVM的子系统 “类加载器”生成的。 类加载器类加载器实际上可以包含一条加载器链，但是只有一个原声类加载器，可以挂接额外类加载器 原生类加载器原生类加载的是所谓的可信类，如：JavaAPI等 额外类加载器额外类加载器用来满足自身的特殊需求，如：以某种特殊方式加载类，以支持WEB服务器应用等 类的动态加载类的动态加载分为三个步骤： 加载由类加载器执行，该步骤将查找字节码，并从字节码中创建一个Class对象 链接链接将验证类中的字节码，为静态域分配存储空间，并且如果必须的话将解析这个类创建其它类的所有引用 初始化如果该类具有超类，则对其初始化，执行静态初始化器和静态初始化块 “惰性”初始化当程序创建第一个对类的静态成员的引用时，就会 加载 该类；根据java虚拟机规范，所有java虚拟机实现必须在每个类或接口被java程序首次 主动使用 时才初始化。 主动使用有如下几种 创建类的实例 访问某个类或者接口的静态域（静态变量、方法） 如果访问静态编译时常量(static final)不会导致类的初始化 构造方法也是类的静态方法，因此使用 new关键字会被当成是对静态成员的引用 12345678910111213141516171819202122232425262728293031323334package org.gavin.clazz;class LazyInitialization1 &#123; static final int FIELD = 0; static int FIELD1 = 1; static &#123; System.out.println("Initial"); &#125;&#125;/** * &lt;p&gt;如果 static域是final的，那么不对类进行初始化也可以进行读取； * &lt;p&gt;若 static域不是final的，那在读取之前进行链接（为这个域分配空间）和初始化（初始化该空间）。 * * @author gavin */public class ClassInitialize1 &#123; public static void main(String[] args) &#123; System.out.println("static final"); System.out.println(LazyInitialization1.FIELD); System.out.println("static"); System.out.println(LazyInitialization1.FIELD1); &#125;&#125;// 输出结果：static final0staticInitial1 反射（Class.forName(xxx.xxx.xxx)） 123456789101112131415161718192021222324252627282930package org.gavin.clazz;class LazyInitialization &#123; static &#123; System.out.println("Initial"); &#125;&#125;/** * &lt;p&gt;使用类字面常量 .class 来创建对Class对象的引用时，不会自动初始化该Class对象; * &lt;p&gt;但是使用 Class.forName() 会立即进行初始化。 * * @author gavin */public class ClassInitialize &#123; @SuppressWarnings("unused") public static void main(String[] args) throws ClassNotFoundException&#123; System.out.println(".class"); Class&lt;LazyInitialization&gt; clazz = LazyInitialization.class; System.out.println("Class.forName()"); Class.forName("org.gavin.clazz.LazyInitialization"); &#125;&#125;// 输出结果：.classClass.forName()Initial 初始化一个类的子类（相当于对父类的主动使用），不过直接通过子类引用父类元素，不会引起子类的初始化 123456789101112131415161718192021222324252627package org.gavin.clazz;class Parent &#123; static int field = 0; static &#123; System.out.println("parent"); &#125;&#125;class Child extends Parent&#123; static &#123; System.out.println("child"); &#125;&#125;/** *当访问一个Java类或接口的静态域时，只有真正声明这个域的类或接口才会被初始化 */public class ClassInitialize2 &#123; public static void main(String[] args) &#123; System.out.println(Child.field); &#125;&#125;// 输出结果：parent0 Java虚拟机被标明为启动类的类（包含main方法的类） 获取Class对象 类字面量常量 .class 反射 Class.forName( ) 实例对象 obj.getClass 参考 Java编程思想 （14章）Java系列笔记(1) - Java 类加载与初始化]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
</search>
